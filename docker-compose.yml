version: '3.8'

services:

  frontend:
    build:
      context: frontend
      target: dev
      args:
        - VITE_BACKEND_URL=${VITE_BACKEND_URL}
    container_name: frontend
    depends_on:
        - backend
    ports:
      - "5173:5173"
    networks:
      - goweb

  backend:
    build:
      context: ./backend
      dockerfile: Dockerfile
      args:
        PORT: ${BACK_SERVER_PORT}
    restart: unless-stopped
    container_name: shop_backend
    hostname: ${BACK_HOST:-backend}
    depends_on:
      - db
    environment:
      DB_USERNAME: ${DB_USERNAME:-postgres}
      DB_PASSWORD: ${DB_PASSWORD:-postgres}
      DB_DATABASE: ${DB_DATABASE}
      DB_PORT: ${DB_PORT}
      DB_HOST: ${DB_HOST}
    ports:
      - $BACK_SERVER_PORT:$BACK_SERVER_PORT
    networks:
      - goweb
    logging:
        driver: "json-file"
        options:
          max-size: "0.3m"
  
 
  db:
    hostname: ${DB_HOST:-db}
    container_name: shop_db
    image: postgres:16-alpine
    environment:
      POSTGRES_USER: ${DB_USERNAME:-postgres}
      POSTGRES_PASSWORD: ${DB_PASSWORD:-postgres}
      POSTGRES_DB: ${DB_DATABASE}
      PGDATA: /data/postgres
    volumes:
       - shop_db:/data/postgres
       - ./backend/db/init/:/docker-entrypoint-initdb.d/
    ports: 
       - ${DB_PORT:-5432}:5432
    networks:
      - goweb
    restart: unless-stopped
    healthcheck:
      test: [ "CMD-SHELL", "pg_isready -d shop_db -U ${DB_USERNAME:-postgres}" ]
      interval: 30s
      timeout: 10s
      retries: 5


  adminer:
    image: adminer
    container_name: shop_pgadminer
    restart: unless-stopped
    ports:
      - 8081:8080  
    networks:
      - goweb
      
      
  # logs:
  #   build:
  #     context: ./logger
  #     dockerfile: Dockerfile
  #     args:
  #       PORT: ${LOG_SERVER_PORT}
  #   restart: unless-stopped
  #   container_name: shop_logs
  #   hostname: ${LOG_HOST:-logs}
  #   depends_on:
  #     - db
  #   env_file:
  #     - .env
  #   ports: [$LOG_SERVER_PORT]
  #   networks:
  #     - goweb
  #   logging:
  #       driver: "json-file"
  #       options:
  #         max-size: "0.3m"    
      
        
  # jaeger:
  # # http://localhost:16686
  #   image: jaegertracing/all-in-one:latest
  #   ports:
  #     - "6831:6831/udp"
  #     - "16686:16686"
  #     - "14268:14268"
  #   networks:
  #     - goweb


  # prometheus:
  #   image: prom/prometheus:latest
  #   volumes:
  #     - "./prometheus/config.yml:/etc/prometheus/prometheus.yml"
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--web.console.libraries=/usr/share/prometheus/console_libraries'
  #     - '--web.console.templates=/usr/share/prometheus/consoles'   
  #   networks:
  #     - goweb
  #   ports:
  #     - 9090:9090
      

  # redis:
  #   image: redis:latest
  #   restart: unless-stopped
  #   container_name: shop_reds
  #   ports:
  #     - "6379:6379"
  #   volumes:
  #     - redis_db:/data
  #   # environment:
  #   #   - REDIS_PASSWORD=my-password
  #   #   - REDIS_PORT=6379
  #   networks:
  #     - goweb

volumes:
  shop_db:
  #redis_db:
  
networks:
  goweb:
      external: true
